"""
# 
# WARNING: DO NOT EDIT THIS FILE
# This file was automatically generated from a template
# Edit the template in src/templates/route.j2 or model_definitions/google_integration.json instead
#
"""
# backend/src/routes/google_integration.py
from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import List, Optional
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
import logging
from sqlalchemy import select, and_

from ..utils.database import get_db
from ..models.google_integration import GoogleIntegration
from ..schemas.google_integration import GoogleIntegrationBase, GoogleIntegrationCreate, GoogleIntegrationUpdate, GoogleIntegrationResponse

router = APIRouter(prefix="/api/google-integrations", tags=["GoogleIntegration"])
logger = logging.getLogger(__name__)


@router.get("/", response_model=List[GoogleIntegrationResponse])
async def get_google_integration_list(
    skip: int = 0, 
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """Retrieve all Google integrations"""
    try:
        stmt = select(GoogleIntegration).offset(skip).limit(limit)
        result = await db.execute(stmt)
        items = result.scalars().all()
        return items
    except SQLAlchemyError as e:
        logger.error(f"Database error in get_google_integration_list: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.get("/{integration_id}", response_model=GoogleIntegrationResponse)
async def get_google_integration(
    integration_id: str,
    db: Session = Depends(get_db)
):
    """Retrieve a specific Google integration by ID"""
    try:
        stmt = select(GoogleIntegration).where(GoogleIntegration.id == integration_id)
        result = await db.execute(stmt)
        item = result.scalar_one_or_none()
        
        if item is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Google integration not found"
            )
        return item
    except SQLAlchemyError as e:
        logger.error(f"Database error in get_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.post("/", response_model=GoogleIntegrationResponse)
async def create_google_integration(
    item_data: GoogleIntegrationCreate,
    db: Session = Depends(get_db)
):
    """Create a new Google integration"""
    try:
        db_item = GoogleIntegration(**item_data.dict())
        db.add(db_item)
        await db.commit()
        await db.refresh(db_item)
        return db_item
    except SQLAlchemyError as e:
        await db.rollback()
        logger.error(f"Database error in create_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.put("/{integration_id}", response_model=GoogleIntegrationResponse)
async def update_google_integration(
    integration_id: str,
    item_update: GoogleIntegrationUpdate,
    db: Session = Depends(get_db)
):
    """Update an existing Google integration"""
    try:
        stmt = select(GoogleIntegration).where(GoogleIntegration.id == integration_id)
        result = await db.execute(stmt)
        db_item = result.scalar_one_or_none()
        
        if db_item is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Google integration not found"
            )
        
        # Update fields
        for field, value in item_update.dict(exclude_unset=True).items():
            setattr(db_item, field, value)
        
        await db.commit()
        await db.refresh(db_item)
        return db_item
    except SQLAlchemyError as e:
        await db.rollback()
        logger.error(f"Database error in update_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.delete("/{integration_id}")
async def delete_google_integration(
    integration_id: str,
    db: Session = Depends(get_db)
):
    """Delete a Google integration"""
    try:
        stmt = select(GoogleIntegration).where(GoogleIntegration.id == integration_id)
        result = await db.execute(stmt)
        db_item = result.scalar_one_or_none()
        
        if db_item is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Google integration not found"
            )
        
        await db.delete(db_item)
        await db.commit()
        return {"message": "Google integration deleted successfully"}
    except SQLAlchemyError as e:
        await db.rollback()
        logger.error(f"Database error in delete_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        ) 