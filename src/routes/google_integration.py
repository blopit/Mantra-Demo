"""
# 
# WARNING: DO NOT EDIT THIS FILE
# This file was automatically generated from a template
# Edit the template in src/templates/route.j2 or model_definitions/google_integration.json instead
#
"""
# backend/src/routes/google_integration.py
from fastapi import APIRouter, Depends, HTTPException, status, Query
from typing import List, Optional
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
import logging

from ..utils.database import get_db
from ..models.google_integration import GoogleIntegration
from ..schemas.google_integration import GoogleIntegrationBase, GoogleIntegrationCreate, GoogleIntegrationUpdate, GoogleIntegrationResponse

router = APIRouter(prefix="/api/google-integrations", tags=["GoogleIntegration"])
logger = logging.getLogger(__name__)


@router.get("/", response_model=List[GoogleIntegrationResponse])
async def get_google_integration_list(
    skip: int = 0, 
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """Retrieve all Google integrations"""
    try:
        items = db.query(GoogleIntegration).offset(skip).limit(limit).all()
        return items
    except SQLAlchemyError as e:
        logger.error(f"Database error in get_google_integration_list: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.get("/{integration_id}", response_model=GoogleIntegrationResponse)
async def get_google_integration(
    integration_id: str,
    db: Session = Depends(get_db)
):
    """Retrieve a specific Google integration by ID"""
    try:
        item = db.query(GoogleIntegration).filter(GoogleIntegration.id == integration_id).first()
        if item is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="GoogleIntegration not found"
            )
        return item
    except SQLAlchemyError as e:
        logger.error(f"Database error in get_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.post("/", response_model=GoogleIntegrationResponse, status_code=status.HTTP_201_CREATED)
async def create_google_integration(
    item_data: GoogleIntegrationCreate,
    db: Session = Depends(get_db)
):
    """Create a new Google integration"""
    try:
        new_item = GoogleIntegration(**item_data.dict())
        db.add(new_item)
        db.commit()
        db.refresh(new_item)
        return new_item
    except SQLAlchemyError as e:
        db.rollback()
        logger.error(f"Database error in create_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.put("/{integration_id}", response_model=GoogleIntegrationResponse)
async def update_google_integration(
    integration_id: str,
    item_update: GoogleIntegrationUpdate,
    db: Session = Depends(get_db)
):
    """Update an existing Google integration"""
    try:
        item = db.query(GoogleIntegration).filter(GoogleIntegration.id == integration_id).first()
        if item is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="GoogleIntegration not found"
            )
            
        # Update fields if provided in the request
        update_data = item_update.dict(exclude_unset=True)
        for field, value in update_data.items():
            if value is not None:  # Skip None values
                setattr(item, field, value)
                
        db.commit()
        db.refresh(item)
        return item
    except SQLAlchemyError as e:
        db.rollback()
        logger.error(f"Database error in update_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        )


@router.delete("/{integration_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_google_integration(
    integration_id: str,
    db: Session = Depends(get_db)
):
    """Delete a Google integration"""
    try:
        item = db.query(GoogleIntegration).filter(GoogleIntegration.id == integration_id).first()
        if item is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="GoogleIntegration not found"
            )
            
        db.delete(item)
        db.commit()
        return None
    except SQLAlchemyError as e:
        db.rollback()
        logger.error(f"Database error in delete_google_integration: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database error occurred"
        ) 