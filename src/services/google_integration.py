"""
# 
# WARNING: DO NOT EDIT THIS FILE
# This file was automatically generated from a template
# Edit the template in src/templates/service.j2 or model_definitions/google_integration.json instead
#
"""
# backend/src/services/google_integration.py
from typing import List, Optional, Dict, Any, Union
from fastapi import Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
import logging


from ..utils.database import get_db
from ..repositories.google_integration import GoogleIntegrationRepository
from ..models.google_integration import GoogleIntegration
from ..schemas.google_integration import GoogleIntegrationCreate, GoogleIntegrationUpdate, GoogleIntegrationResponse

logger = logging.getLogger(__name__)



class GoogleIntegrationService:
    """Service for GoogleIntegration business logic"""
    
    def __init__(self, db: Session = Depends(get_db)):
        self.repository = GoogleIntegrationRepository(db)
        self.db = db
    
    def get_all(self, skip: int = 0, limit: int = 100) -> List[GoogleIntegration]:
        """Get all google-integrations with pagination"""
        try:
            return self.repository.get_all(skip, limit)
        except SQLAlchemyError as e:
            logger.error(f"Database error in get_all google-integrations: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Database error occurred"
            )
    
    def get_by_id(self, integration_id: str) -> GoogleIntegration:
        """Get a GoogleIntegration by ID"""
        try:
            item = self.repository.get_by_id(integration_id)
            if item is None:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="GoogleIntegration not found"
                )
            return item
        except HTTPException:
            raise
        except SQLAlchemyError as e:
            logger.error(f"Database error in get_by_id google-integrations: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Database error occurred"
            )
    
    
    def create(self, data: Union[Dict[str, Any], GoogleIntegrationCreate]) -> GoogleIntegration:
        """Create a new GoogleIntegration"""
        try:
            if isinstance(data, dict):
                data = GoogleIntegrationCreate(**data)
            
            return self.repository.create(data.dict())
            
        except SQLAlchemyError as e:
            self.db.rollback()
            logger.error(f"Database error in create google-integrations: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Database error occurred"
            )
    
    def update(self, integration_id: str, data: Union[Dict[str, Any], GoogleIntegrationUpdate]) -> GoogleIntegration:
        """Update an existing GoogleIntegration"""
        try:
            # First check if the item exists
            self.get_by_id(integration_id)
            
            # Convert dict to Update if needed
            if isinstance(data, dict):
                data = GoogleIntegrationUpdate(**data)
            
            # Update the item
            
            item = self.repository.update(integration_id, data.dict(exclude_unset=True))
            
            if item is None:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="GoogleIntegration not found"
                )
            return item
        except HTTPException:
            raise
        except SQLAlchemyError as e:
            self.db.rollback()
            logger.error(f"Database error in update google-integrations: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Database error occurred"
            )
    
    def delete(self, integration_id: str) -> None:
        """Delete a GoogleIntegration"""
        try:
            # First check if the item exists
            self.get_by_id(integration_id)
            
            # Delete the item
            success = self.repository.delete(integration_id)
            if not success:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="GoogleIntegration not found"
                )
        except HTTPException:
            raise
        except SQLAlchemyError as e:
            self.db.rollback()
            logger.error(f"Database error in delete google-integrations: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Database error occurred"
            )
            
    def search(self, query: str, skip: int = 0, limit: int = 100) -> List[GoogleIntegration]:
        """Search for GoogleIntegration records"""
        try:
            return self.repository.search(query, skip, limit)
        except SQLAlchemyError as e:
            logger.error(f"Database error in search google-integrations: {e}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Database error occurred"
            ) 